#include "Scanner.h"
#include "firmware.h"
#include "coefs.h"

// temp
#include <iostream>
#include <iomanip>
#include <memory>
#include <EasyBMP.h>


using namespace std;

static const uint8_t FILL_BYTE = 0xac;

struct ControllChannel
{
	uint16_t sendValue;
	uint16_t sendIndex;
	uint16_t rcvValue;
	uint16_t rcvIndex;
};

static const ControllChannel CHANNEL_2012 =
{
	0x2012, 0x3f40,
	0x2013, 0x3f00
};

static const ControllChannel CHANNEL_2010 =
{
	0x2010, 0x3f40,
	0x2011, 0x3f00
};

static const ControllChannel CHANNEL_FIRMWARE_1 =
{
	0x200b, 0x0000,
	0x200c, 0x0000
};

static const ControllChannel CHANNEL_FIRMWARE_2 =
{
	0x200b, 0x1000,
	0x200c, 0x1000
};

static const uint8_t REQUEST_TYPE_SEND = 0x40;
static const uint8_t REQUEST_TYPE_RCV  = 0xc0;
static const uint8_t REQUEST = 0x04;
static const uint8_t IMAGE_ENDPOINT = 0x81;

void writeMemDump( unsigned char* p, int size)
{
	cout << setfill('0') << hex;
	int i = 0;
	for(i = 0; i < (size / 16); ++i)
	{
		for(int j = 0; j<16; ++j)
			{ cout << " " << setw(2) << (int)p[i*16+j]; }

		cout << endl;
	}

	if(i*16 < size)
	{
		for(int j = i*16; j < size; ++j)
			{ cout << " " << setw(2) << (int)p[j]; }

		cout << endl;
	}
	cout << dec;
}

int Scanner::sendRcvMsg( ControllChannel chan , 
						const uint8_t* sendBuff, uint16_t sendSize,
						uint8_t* rcvBuff,	uint16_t rcvSize,
						bool silent)
{
	if(!silent){ cout << "Sending msg ... "; };

	// using const_cast<> - je iste ze sa na miesto do pamete nezapise?
	int r = libusb_control_transfer(
				_handle, REQUEST_TYPE_SEND, REQUEST,
				chan.sendValue, chan.sendIndex,
				const_cast<uint8_t*>(sendBuff), sendSize, 10000);
	if(r < 0)
	{
		if(!silent){ cout << "ERROR " << libusb_error_name(r) << endl; }
		return r;
	}
	if(!silent) { cout << "OK" << endl; }

	memset(rcvBuff,FILL_BYTE,rcvSize);

	if(!silent) { cout << "Receiving msg ... "; }
	r = libusb_control_transfer(
			_handle, REQUEST_TYPE_RCV, REQUEST,
			chan.rcvValue, chan.rcvIndex,
			rcvBuff, rcvSize, 10000);
	if(r < 0)
	{
		if(!silent) { cout << "ERROR " << libusb_error_name(r) << endl; }
		return r;
	}

	if(!silent) 
	{
		cout << "OK" << endl; 
		cout << endl;
		writeMemDump((unsigned char*)rcvBuff,rcvSize);
		cout << endl;
	}

	return 0;
}


int Scanner::sendFirmware()
{
	cout << "Sending Firmware part1" << endl;

	// send first 4kB
	uint8_t rcvBuff[FIRMWARE_BLOCK_SIZE] = {FILL_BYTE};
	int r = sendRcvMsg(	CHANNEL_FIRMWARE_1, 
						firmware1, FIRMWARE_BLOCK_SIZE,
						rcvBuff,   FIRMWARE_BLOCK_SIZE, true);
	if(r < 0) {return r;}

	// check if received == sent
	bool consistent = true;
	for(int i = 0; i < FIRMWARE_BLOCK_SIZE; ++i) 
	{ 
		if(rcvBuff[i] != firmware1[i])
			{ consistent = false; break; }
	}
	if(!consistent)
	{
		cout << "ERROR: not consistent firmware part1" << endl;
	}
	
	// send second 4kB
	cout << "Sending Firmware part2" << endl;

	memset(rcvBuff,FILL_BYTE,FIRMWARE_BLOCK_SIZE);
	r = sendRcvMsg(	CHANNEL_FIRMWARE_2, 
					firmware2, FIRMWARE_BLOCK_SIZE,
					rcvBuff,   FIRMWARE_BLOCK_SIZE, true);
	if(r < 0) { return r; }

	consistent = true;
	for(int i = 0; i < FIRMWARE_BLOCK_SIZE; ++i) 
	{ 
		if(rcvBuff[i] != firmware2[i])
			{ consistent = false; break; }
	}
	if(!consistent)
	{
		cout << "ERROR: not consistent firmware part2" << endl;
	}

	return 0;
}

int Scanner::sendMsg73(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 73" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE); 
}

int Scanner::sendMsg70(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 70" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg69(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x69, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 69" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg2e(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x2e, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 2e" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg74(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 74" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}


int Scanner::sendMsg17(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 17" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg3f(ControllChannel chan)
{
	/*const uint8_t msg[64] = 
	{
		0x3f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	const uint8_t msg[64] = 
	{
		0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 3f" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg12(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 12" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg22(ControllChannel chan)
{
	
	const uint8_t msg[64] = 
	{
		0x22, 0x01, 0x17, 0x10, 0x17, 0x10, 0x17, 0x10,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	// 22 01 1b 1e 18 10 12 06
	/*const uint8_t msg[64] = 
	{
		0x22, 0x01, 0x1b, 0x1e, 0x18, 0x10, 0x12, 0x06,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	cout << "MSG: 22" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg22color(ControllChannel chan, uint16_t color)
{
	
	uint8_t msg[64] = 
	{
		0x22, 0x01, 0x1b, 0x1e, 0x18, 0x10, 0x12, 0x06,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	if (color == COLOR_GREY)
	{
		msg[2] = msg[4] = msg[6] = 0x17;
		msg[3] = msg[5] = msg[7] = 0x10;
	}
	
	cout << "MSG: 22" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg22param(ControllChannel chan,
							uint8_t r1, uint8_t r2, 
							uint8_t g1, uint8_t g2,
							uint8_t b1, uint8_t b2)
{
	const uint8_t msg[64] = 
	{
		0x22, 0x01,   r1,   r2,   g1,   g2,   b1,   b2,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 22" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}


int Scanner::sendMsg20info(ControllChannel chan, ScanInfo info)
{
	/*
struct packet
{
0000:
	uint16_t command
	uint16_t yStart       // in points 600DPI
	uint16_t heightToScan // in points 600DPI 
	uint16_t xStart		  // 
0008:
	uint16_t widthToScan  // in points 600DPI
	uint16_t color
	uint16_t DPI
	uint16_t rowSize // number of 64B blocks * color depth
0010:
	uint16_t xSize    // in bytes (bulk size)
	uint16_t ySize    // in rows
	uint16_t unknown5 // 08 00
	uint16_t DPI
}
*/
	uint16_t colorDepth = (info.color == COLOR_GREY) ? 1 : 3;
	uint16_t xSize      = ((info.width * info.DPI) / 600) * (info.color == COLOR_48_BIT ? 2 : 1);
	uint16_t ySize      = (info.height * info.DPI) / 600;
	uint16_t rowSize    = (xSize * colorDepth) / 64; 
	
	
	uint16_t msg[32] = 
	{
		0x0120,     info.startY, info.height, info.startX,
		info.width, info.color,  info.DPI,    rowSize,
		xSize,      ySize,		 0x0008,      info.DPI,
		0x003c,     0x0000,      0x0000,      0x0000  
	};

	// to little endian
	for(int i=0; i< 32; ++i)
		{ msg[i] = libusb_cpu_to_le16(msg[i]); }


	cout << "MSG: 20" << endl;

	return sendRcvMsg(chan,(uint8_t*)msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg43(ControllChannel chan)
{
	
	/*const uint8_t msg[64] = 
	{
		0x43, 0x01, 0xf0, 0x1a, 0x2c, 0x01, 0x18, 0x00,
		0x00, 0x14, 0x82, 0x10, 0x4b, 0x00, 0x0a, 0x00,
		0x80, 0x02, 0x26, 0x00, 0x08, 0x00, 0x4b, 0x00,
		0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	const uint8_t msg[64] = 
	{
		0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 43" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg35(ControllChannel chan, bool silent)
{
	/*const uint8_t msg[64] = 
	{
		0x35, 0x01, 0xf0, 0x1a, 0x2c, 0x01, 0x18, 0x00,
		0x00, 0x14, 0x82, 0x10, 0x4b, 0x00, 0x0a, 0x00,
		0x80, 0x02, 0x26, 0x00, 0x08, 0x00, 0x4b, 0x00,
		0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	const uint8_t msg[64] = 
	{
		0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	if(!silent){cout << "MSG: 35" << endl;}

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE,silent);
}

int Scanner::sendMsg41(ControllChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x41, 0x01, 0xf0, 0x1a, 0x2c, 0x01, 0x18, 0x00,
		0x00, 0x14, 0x82, 0x10, 0x4b, 0x00, 0x0a, 0x00,
		0x80, 0x02, 0x26, 0x00, 0x08, 0x00, 0x4b, 0x00,
		0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	
	cout << "MSG: 41" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}


Scanner::Scanner(libusb_device_handle* handle):
	_handle(handle)
{
	_rowTransfer = NULL;
	_newBuffer = NULL; _oldBuffer = NULL;
	memset(_rcvBuffer,FILL_BYTE,RCV_BUFF_SIZE);
}

Scanner::~Scanner()
{

}

int Scanner::init()
{
	int r = 0;
	if((r = sendMsg73(CHANNEL_2012))< 0) { return r; }
	if((r = sendMsg70(CHANNEL_2012))< 0) { return r; }
	// check if installation rquired

	//if(firmwareNotInstalled)
	{
		if((r = sendFirmware()) < 0) { return r; }
		if((r = sendMsg69(CHANNEL_2010))< 0) { return r; }
	}

	if((r = sendMsg2e(CHANNEL_2012))< 0) { return r; }

	//if((r = sendMsg74(CHANNEL_2012))< 0) { return r; }

	return 0;
}


int Scanner::rcvRow(uint8_t* rcvBuff, int buffLen, int& accLen)
{
	int r = libusb_bulk_transfer(_handle,IMAGE_ENDPOINT,rcvBuff,buffLen,&accLen,10000);
	if(r < 0)
	{
		cout << "Error receiving data " << libusb_error_name(r) << endl;
		return r;
	}
	return 0;
}

inline float clamp(float x, float a, float b)
{
	return (x < a) ? a : ((x > b) ? b : x) ;
}

int Scanner::rcvDataBMP(BMP& image, int row, uint16_t DPI , uint16_t color)
{
	const int IMG_BUFF_SIZE = 5120;
	uint8_t imgBuffer[IMG_BUFF_SIZE];

	int rowSize = (IMG_BUFF_SIZE * DPI) / 600;
	int s = 600/DPI;

	if(color == COLOR_RGB)
	{
		int accLen = 0;
		if(rcvRow(imgBuffer, rowSize,accLen) < 0) {return -1;}
		for(int i = 0; i< accLen; ++i)
		{
			if(i >= image.TellWidth()) { break; }
			float val = float(imgBuffer[i]) * invCoef[i*s] + 0.5;
			/*image(i,row)->Red= ebmpBYTE(clamp(val,0,255));
			image(i,row)->Green = ebmpBYTE(clamp(val,0,255));
			image(i,row)->Blue = ebmpBYTE(clamp(val,0,255));*/
			//image(i,row)->Red = imgBuffer[i];
		}

		if(rcvRow(imgBuffer, rowSize,accLen) < 0) {return -1;}
		for(int i = 0; i< accLen; ++i)
		{
			if(i >= image.TellWidth()) { break; }
			/*float val = float(imgBuffer[i]) * invCoef[i*s] + 0.5;
			image(i,row)->Red= ebmpBYTE(clamp(val,0,255));
			image(i,row)->Green = ebmpBYTE(clamp(val,0,255));
			image(i,row)->Blue = ebmpBYTE(clamp(val,0,255));*/
			image(i,row)->Red = imgBuffer[i];
			image(i,row)->Green = imgBuffer[i];
			image(i,row)->Blue = imgBuffer[i];
		}

		if(rcvRow(imgBuffer, rowSize,accLen) < 0) {return -1;}
		for(int i = 0; i< accLen; ++i)
		{
			if(i >= image.TellWidth()) { break; }
			float val = float(imgBuffer[i]) * invCoef[i*s] + 0.5;
			/*image(i,row)->Red= ebmpBYTE(clamp(val,0,255));
			image(i,row)->Green = ebmpBYTE(clamp(val,0,255));
			image(i,row)->Blue = ebmpBYTE(clamp(val,0,255));*/
			//image(i,row)->Blue = imgBuffer[i];
		}
	}
	else
	{
		int accLen = 0;
		if(rcvRow(imgBuffer, rowSize, accLen) < 0) {return -1;}
		for(int i = 0; i< accLen; ++i)
		{
			if(i >= image.TellWidth()) { break; }
			
			float val = float(imgBuffer[i]) * invCoef[i*s] + 0.5f;
			image(i,row)->Red= ebmpBYTE(clamp(val,0,255));
			image(i,row)->Green = ebmpBYTE(clamp(val,0,255));
			image(i,row)->Blue = ebmpBYTE(clamp(val,0,255));
		/*	image(i,row)->Red= imgBuffer[i];
			image(i,row)->Green = imgBuffer[i];
			image(i,row)->Blue = imgBuffer[i];*/
		}
	}

	return 0;
}


int Scanner::initiateRowTransfer(uint8_t* buffer, long bufferSize)
{
	libusb_fill_bulk_transfer(_rowTransfer,_handle,IMAGE_ENDPOINT,buffer,bufferSize,NULL,NULL,0);
	return libusb_submit_transfer(_rowTransfer);
}

void Scanner::processRow(uint8_t* buffer, long bufferSize)
{
	for(int i = 0; i < bufferSize; ++i)
	{
		float val = float(buffer[i]) * invCoef[i] + 0.5f;
		buffer[i] = uint8_t(clamp(val, 0, 255));
	}
}

int Scanner::scanBMP(ScanInfo scan, const char* filename, uint8_t p1, uint8_t p2)
{
	BMP image;
	image.SetBitDepth(24);
	image.SetDPI(scan.DPI,scan.DPI);
	int width  = (scan.width * scan.DPI) / 600;
	int height = (scan.height * scan.DPI) / 600;
	image.SetSize(width,height);
	
	if((width <= 0) || (height <= 0)) { return -1; } 

	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }

	// overit necakane odpovede
	// skusit vzyustit??
	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg3f(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg12(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }


	if(sendMsg22param(CHANNEL_2010,p1,p2,p1,p2,p1,p2)< 0) { return -1; }
	//if(sendMsg22color(CHANNEL_2010,scan.color)< 0) { return -1; }
	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }

	// TODO: checkovanie odpovedi na scanInfo
	if(sendMsg20info(CHANNEL_2010,scan)< 0) { return -1; }

	/*if((_rowTransfer = libusb_alloc_transfer(0)) == NULL ) { return -1; }
	_rowBuffer[0].clear();
	_rowBuffer[1].clear();
	_rowBuffer[0].resize(ROW_SIZE,0);
	_rowBuffer[1].resize(ROW_SIZE,0);
	_newBuffer = &(_rowBuffer[0][0]);
	_oldBuffer = &(_rowBuffer[1][0]);*/

	// start scanning
	if(sendMsg43(CHANNEL_2010)< 0) { return -1; }

	if(sendMsg35(CHANNEL_2010)< 0) { return -1; }
	while(_rcvBuffer[0] == 0x35)
	{
		Sleep(50); 
		if(sendMsg35(CHANNEL_2010, true)< 0) { return -1; }
	}
	
	for(int i = 0; i < height; ++i)
	{
		if(rcvDataBMP(image,i,scan.DPI,scan.color) < 0) { return -1; };
	}
	//

/*	if(scan.color == COLOR_RGB)
	{

	}
	else
	{
		if(initiateRowTransfer(_newBuffer, ROW_SIZE)< 0) { return -1; }
		if(libusb_handle_events_completed(NULL,NULL) < 0) { return -1; }
		swapBuffers();

		for(int i = 1; i < height; ++i)
		{
			if(initiateRowTransfer(_newBuffer, ROW_SIZE) < 0) { return -1; };
			processRow(_oldBuffer, ROW_SIZE);
			for(int j = 0; j < ROW_SIZE; ++j)
			{
				image(i,j)->Red   = _oldBuffer[j];
				image(i,j)->Green = _oldBuffer[j];
				image(i,j)->Blue  = _oldBuffer[j];
			}
			if(libusb_handle_events_completed(NULL,NULL) < 0) { return -1; }
			swapBuffers();
		}
		processRow(_oldBuffer, ROW_SIZE);
		writeToBMP(image, height-1, _oldBuffer, ROW_SIZE);
	}*/


	// stop scanning
	if(sendMsg41(CHANNEL_2012)< 0) { return -1; }
	// zbytocne?
	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }

	image.WriteToFile(filename);


	//libusb_free_transfer(_rowTransfer);

	return 0;
}