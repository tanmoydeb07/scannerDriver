#include "stdafx.h"
#include "Scanner.h"
#include "USBInterface.h"
#include "firmware.h"
#include "coefs.h"

// temp
#include <iostream>
#include <iomanip>
#include <memory>
#include <cassert>

using namespace std;

// for debug
static const uint8_t FILL_BYTE = 0xac;

struct ControlChannel
{
	uint16_t sendValue;
	uint16_t sendIndex;
	uint16_t rcvValue;
	uint16_t rcvIndex;
};

static const ControlChannel CHANNEL_2012 =
{
	0x2012, 0x3f40,
	0x2013, 0x3f00
};

static const ControlChannel CHANNEL_2010 =
{
	0x2010, 0x3f40,
	0x2011, 0x3f00
};

static const ControlChannel CHANNEL_FIRMWARE_1 =
{
	0x200b, 0x0000,
	0x200c, 0x0000
};

static const ControlChannel CHANNEL_FIRMWARE_2 =
{
	0x200b, 0x1000,
	0x200c, 0x1000
};

static const uint16_t COLOR_CODES[] =
{
	0x1082,		// Grayscale
	0x1092,		// Grayscale 16-bit
	0x1084,		// RGB
	0x1094,		// 16-bit RGB --> 48-bit
};

static const int BYTES_PER_PIXEL[] =
{
	1, //COLOR_GRAY
	2, //COLOR_GRAY_16_BIT
	3, //COLOR_RGB
	6, //COLOR_RGB_16_BIT
};

static const uint8_t REQUEST_TYPE_SEND = 0x40;
static const uint8_t REQUEST_TYPE_RCV  = 0xc0;
static const uint8_t REQUEST = 0x04;
static const uint8_t IMAGE_ENDPOINT = 0x81;

void writeMemDump( unsigned char* p, int size)
{
	cout << setfill('0') << hex;
	int i = 0;
	for(i = 0; i < (size / 16); ++i)
	{
		for(int j = 0; j<16; ++j)
			{ cout << " " << setw(2) << (int)p[i*16+j]; }

		cout << endl;
	}

	if(i*16 < size)
	{
		for(int j = i*16; j < size; ++j)
			{ cout << " " << setw(2) << (int)p[j]; }

		cout << endl;
	}
	cout << dec;
}

int Scanner::sendRcvMsg( ControlChannel chan , 
						const uint8_t* sendBuff, uint16_t sendSize,
						uint8_t* rcvBuff,	uint16_t rcvSize,
						bool silent)
{
	if(!silent){ cout << "Sending msg ... "; };

	// using const_cast<> - sure not to write to memory?
	int r = _usb.controlTransfer(
				REQUEST_TYPE_SEND, REQUEST,
				chan.sendValue, chan.sendIndex,
				const_cast<uint8_t*>(sendBuff), sendSize);
	if(r < 0)
	{
		//if(!silent){ cout << "ERROR " << libusb_error_name(r) << endl; }
		return r;
	}
	if(!silent) { cout << "OK" << endl; }

	memset(rcvBuff,FILL_BYTE,rcvSize);

	if(!silent) { cout << "Receiving msg ... "; }
	r = _usb.controlTransfer(
			REQUEST_TYPE_RCV, REQUEST,
			chan.rcvValue, chan.rcvIndex,
			rcvBuff, rcvSize);
	if(r < 0)
	{
		//if(!silent) { cout << "ERROR " << libusb_error_name(r) << endl; }
		return r;
	}

	if(!silent) 
	{
		cout << "OK" << endl; 
		cout << endl;
		writeMemDump((unsigned char*)rcvBuff,rcvSize);
		cout << endl;
	}

	return 0;
}


int Scanner::sendFirmware()
{
	cout << "Sending Firmware part1" << endl;

	// send first 4kB
	uint8_t rcvBuff[FIRMWARE_BLOCK_SIZE] = {FILL_BYTE};
	int r = sendRcvMsg(	CHANNEL_FIRMWARE_1, 
						firmware1, FIRMWARE_BLOCK_SIZE,
						rcvBuff,   FIRMWARE_BLOCK_SIZE, true);
	if(r < 0) {return r;}

	// check if received == sent
	bool consistent = true;
	for(int i = 0; i < FIRMWARE_BLOCK_SIZE; ++i) 
	{ 
		if(rcvBuff[i] != firmware1[i])
			{ consistent = false; break; }
	}
	if(!consistent)
	{
		cout << "ERROR: not consistent firmware part1" << endl;
	}
	
	// send second 4kB
	cout << "Sending Firmware part2" << endl;

	memset(rcvBuff,FILL_BYTE,FIRMWARE_BLOCK_SIZE);
	r = sendRcvMsg(	CHANNEL_FIRMWARE_2, 
					firmware2, FIRMWARE_BLOCK_SIZE,
					rcvBuff,   FIRMWARE_BLOCK_SIZE, true);
	if(r < 0) { return r; }

	consistent = true;
	for(int i = 0; i < FIRMWARE_BLOCK_SIZE; ++i) 
	{ 
		if(rcvBuff[i] != firmware2[i])
			{ consistent = false; break; }
	}
	if(!consistent)
	{
		cout << "ERROR: not consistent firmware part2" << endl;
	}

	return 0;
}

int Scanner::sendMsg73(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 73" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE); 
}

int Scanner::sendMsg70(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 70" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg69(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x69, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 69" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg2e(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x2e, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 2e" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg74(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 74" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}


int Scanner::sendMsg17(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 17" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg3f(ControlChannel chan)
{
	/*const uint8_t msg[64] = 
	{
		0x3f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	const uint8_t msg[64] = 
	{
		0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 3f" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg12(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 12" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg22(ControlChannel chan)
{
	
	const uint8_t msg[64] = 
	{
		0x22, 0x01, 0x17, 0x10, 0x17, 0x10, 0x17, 0x10,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	// 22 01 1b 1e 18 10 12 06
	/*const uint8_t msg[64] = 
	{
		0x22, 0x01, 0x1b, 0x1e, 0x18, 0x10, 0x12, 0x06,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	cout << "MSG: 22" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg22color(ControlChannel chan, uint16_t color)
{
	
	uint8_t msg[64] = 
	{
		0x22, 0x01, 0x1b, 0x1e, 0x18, 0x10, 0x12, 0x06,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	if (color == COLOR_GRAY)
	{
		msg[2] = msg[4] = msg[6] = 0x17;
		msg[3] = msg[5] = msg[7] = 0x10;
	}
	
	cout << "MSG: 22" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg22param(ControlChannel chan,
							uint8_t r1, uint8_t r2, 
							uint8_t g1, uint8_t g2,
							uint8_t b1, uint8_t b2)
{
	const uint8_t msg[64] = 
	{
		0x22, 0x01,   r1,   r2,   g1,   g2,   b1,   b2,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 22" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}


int Scanner::sendMsg20info(ControlChannel chan, ScanInfo info)
{
	/*
struct packet
{
0000:
	uint16_t command
	uint16_t yStart       // in points 600DPI
	uint16_t heightToScan // in points 600DPI 
	uint16_t xStart		  // 
0008:
	uint16_t widthToScan  // in points 600DPI
	uint16_t color
	uint16_t DPI
	uint16_t rowSize // number of 64B blocks * color depth
0010:
	uint16_t xSize    // in bytes (bulk size)
	uint16_t ySize    // in rows
	uint16_t unknown5 // 08 00
	uint16_t DPI
}
*/
	uint16_t colorDepth = (info.color == COLOR_GRAY) ? 1 : 3;

	uint16_t bytesPerChannel = ((info.color == COLOR_GRAY_16_BIT) || (info.color == COLOR_RGB_16_BIT)) ? 2 : 1 ;

	uint16_t xSize      = ((info.width * info.DPI) / 600) * bytesPerChannel;
	uint16_t ySize      = (info.height * info.DPI) / 600;
	uint16_t rowSize    = (xSize * colorDepth) / 64; 
	
	
	uint16_t msg[32] = 
	{
		0x0120,					info.startY, 
		info.height,			info.startX,
		info.width,				COLOR_CODES[info.color],  
		(uint16_t) info.DPI,	rowSize,
		xSize,					ySize,
		0x0008,					(uint16_t)info.DPI,
		0x003c,					0x0000,
		0x0000,					0x0000  
	};

	// to little endian
	//for(int i=0; i< 32; ++i)
	//	{ msg[i] = libusb_cpu_to_le16(msg[i]); }

	cout << "MSG: 20" << endl;

	return sendRcvMsg(chan,(uint8_t*)msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg43(ControlChannel chan)
{
	
	/*const uint8_t msg[64] = 
	{
		0x43, 0x01, 0xf0, 0x1a, 0x2c, 0x01, 0x18, 0x00,
		0x00, 0x14, 0x82, 0x10, 0x4b, 0x00, 0x0a, 0x00,
		0x80, 0x02, 0x26, 0x00, 0x08, 0x00, 0x4b, 0x00,
		0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	const uint8_t msg[64] = 
	{
		0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	cout << "MSG: 43" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}

int Scanner::sendMsg35(ControlChannel chan, bool silent)
{
	/*const uint8_t msg[64] = 
	{
		0x35, 0x01, 0xf0, 0x1a, 0x2c, 0x01, 0x18, 0x00,
		0x00, 0x14, 0x82, 0x10, 0x4b, 0x00, 0x0a, 0x00,
		0x80, 0x02, 0x26, 0x00, 0x08, 0x00, 0x4b, 0x00,
		0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};*/

	const uint8_t msg[64] = 
	{
		0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	if(!silent){cout << "MSG: 35" << endl;}

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE,silent);
}

int Scanner::sendMsg41(ControlChannel chan)
{
	const uint8_t msg[64] = 
	{
		0x41, 0x01, 0xf0, 0x1a, 0x2c, 0x01, 0x18, 0x00,
		0x00, 0x14, 0x82, 0x10, 0x4b, 0x00, 0x0a, 0x00,
		0x80, 0x02, 0x26, 0x00, 0x08, 0x00, 0x4b, 0x00,
		0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	
	cout << "MSG: 41" << endl;

	return sendRcvMsg(chan,msg,64,_rcvBuffer,RCV_BUFF_SIZE);
}


Scanner::Scanner(HANDLE usbDeviceHandle):
	_usb(usbDeviceHandle)
{
	memset(_rcvBuffer,FILL_BYTE,RCV_BUFF_SIZE);

	memset(_rowBuffers,FILL_BYTE,6 * MAX_ROW_SIZE);
	_oldRow   = &_rowBuffers[0][0];
	_newRow   = &_rowBuffers[1][0];
	memset(_rgbRow, FILL_BYTE, 3 * MAX_ROW_SIZE);

	_bytesReady = 0;
	_scanning = false;
}

Scanner::~Scanner()
{

}

int Scanner::init()
{
	int r = 0;
	if((r = sendMsg73(CHANNEL_2012))< 0) { return r; }
	if((r = sendMsg70(CHANNEL_2012))< 0) { return r; }

	// check if installation rquired
	//if(firmwareNotInstalled)
	{
		if((r = sendFirmware()) < 0) { return r; }
		if((r = sendMsg69(CHANNEL_2010))< 0) { return r; }
	}

	if((r = sendMsg2e(CHANNEL_2012))< 0) { return r; }

	//if((r = sendMsg74(CHANNEL_2012))< 0) { return r; }

	return 0;
}


int Scanner::rcvRowData(uint8_t* buffer, unsigned long bufferSize, unsigned long& actualSize)
{
	int r = _usb.bulkTransfer(IMAGE_ENDPOINT,buffer,bufferSize,&actualSize);
	if(r < 0)
	{
		cout << "Error receiving data " << r << endl;
		return r;
	}
	return 0;
}

AsyncIOHandle Scanner::rcvRowDataAsync(uint8_t* buffer, unsigned long bufferSize)
{
	return _usb.bulkTransferAsync(IMAGE_ENDPOINT,buffer,bufferSize,NULL);
}

inline float clamp(float x, float a, float b)
{
	return (x < a) ? a : ((x > b) ? b : x) ;
}

void Scanner::rcvRowAsync()
{
	int dpi = _currentScanInfo.DPI;
	int rowSize = (_currentScanInfo.width * dpi) / 600;

	// read RGB channels in one call
	int expectedSize = BYTES_PER_PIXEL[_currentScanInfo.color] * rowSize;

	unsigned long actualSize = 0;		
	_rowOper = rcvRowDataAsync(_newRow, expectedSize);
}

void Scanner::processRow()
{
	int dpi = _currentScanInfo.DPI;
	int rowSize = (_currentScanInfo.width * dpi) / 600;
	int stepSize = 600 / dpi;

	switch(_currentScanInfo.color)
	{
	case COLOR_GRAY: 
		{
			uint8_t* pixels = _oldRow;
			uint8_t* outPixels = _rgbRow;

			for(long i = 0; i < rowSize; ++i) {
				float c = 1; //invCoef[i*stepSize];
				outPixels[i] = uint8_t( min(c * float(pixels[i]) + 0.5f, 255.0f) );
			}
		} break;

	case COLOR_GRAY_16_BIT: 
		{
			uint16_t* pixels = (uint16_t*) _oldRow;
			uint16_t* outPixels = (uint16_t*) _rgbRow;

			for(long i = 0; i < rowSize; ++i) {
				float c = 1; //invCoef[i*stepSize];
				outPixels[i] = uint16_t( min(c * float(pixels[i]) + 0.5f, 65535.0f) );
			}
		} break;

	case COLOR_RGB:
		{
			uint8_t* pRed   = _oldRow;
			uint8_t* pGreen = _oldRow +     rowSize;
			uint8_t* pBlue  = _oldRow + 2 * rowSize;

			uint8_t* outPixels = (uint8_t*) _rgbRow;

			for(long i = 0; i < rowSize; ++i) {
				float c = 1;//invCoef[i*stepSize];
				outPixels[3*i]     = uint8_t( min(c * float(pRed[i])   + 0.5f, 255.0f) );
				outPixels[3*i + 1] = uint8_t( min(c * float(pGreen[i]) + 0.5f, 255.0f) );
				outPixels[3*i + 2] = uint8_t( min(c * float(pBlue[i])  + 0.5f, 255.0f) );
			}
		} break;

	case COLOR_RGB_16_BIT:
		{
			uint16_t* pRed   = (uint16_t*) _oldRow;
			uint16_t* pGreen = pRed +     rowSize;
			uint16_t* pBlue  = pRed + 2 * rowSize;

			uint16_t* outPixels = (uint16_t*) _rgbRow;

			for(long i = 0; i < rowSize; ++i)
			{
				float c = 1;//invCoef[i*stepSize];
				outPixels[3*i]     = uint16_t( min(c * float(pRed[i])   + 0.5f, 65535.0f) );
				outPixels[3*i + 1] = uint16_t( min(c * float(pGreen[i]) + 0.5f, 65535.0f) );
				outPixels[3*i + 2] = uint16_t( min(c * float(pBlue[i])  + 0.5f, 65535.0f) );
			}
		} break;
	}

	_bytesPtr = _rgbRow;
	_bytesReady = BYTES_PER_PIXEL[_currentScanInfo.color] * rowSize;
}

int Scanner::initScan(ScanInfo scan)
{
	assert(! _scanning);

	if((scan.width <= 0) || (scan.height <= 0)) { return -1; } 

	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }

	// overit necakane odpovede
	// skusit vypustit??
	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg3f(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg12(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }

	//if(sendMsg22color(CHANNEL_2010,scan.color)< 0) { return -1; }

	if(sendMsg22param(CHANNEL_2010,
		0x17, 0x10, 0x17, 0x10, 0x17, 0x10)< 0) { return -1; }

	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }

	// TODO: checkovanie odpovedi na scanInfo
	if(sendMsg20info(CHANNEL_2010,scan)< 0) { return -1; }

	// start scanning
	if(sendMsg43(CHANNEL_2010)< 0) { return -1; }

	// wait until scanning starts
	if(sendMsg35(CHANNEL_2010)< 0) { return -1; }
	while(_rcvBuffer[0] == 0x35)
	{
		::Sleep(50); 
		if(sendMsg35(CHANNEL_2010, true)< 0) { return -1; }
	}

	_bytesReady = 0;
	_currentScanInfo = scan;
	_scanning = true;

	rcvRowAsync();

	return 0;
}

int Scanner::initScan2(ScanInfo scan, uint8_t v1, uint8_t v2)
{
	assert(! _scanning);

	if((scan.width <= 0) || (scan.height <= 0)) { return -1; } 

	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }
//	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }

	// overit necakane odpovede
	// skusit vypustit??
	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg3f(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg12(CHANNEL_2010)< 0) { return -1; }
	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }

	if(sendMsg22param(CHANNEL_2010,
		v1, v2, v1, v2, v1, v2)< 0) { return -1; }

	if(sendMsg17(CHANNEL_2010)< 0) { return -1; }

	// TODO: checkovanie odpovedi na scanInfo
	if(sendMsg20info(CHANNEL_2010,scan)< 0) { return -1; }

	// start scanning
	if(sendMsg43(CHANNEL_2010)< 0) { return -1; }

	// wait until scanning starts
	if(sendMsg35(CHANNEL_2010)< 0) { return -1; }
	while(_rcvBuffer[0] == 0x35)
	{
		::Sleep(50); 
		if(sendMsg35(CHANNEL_2010, true)< 0) { return -1; }
	}

	_bytesReady = 0;
	_currentScanInfo = scan;
	_scanning = true;

	rcvRowAsync();

	return 0;
}

int Scanner::rcvData(long length ,uint8_t* buffer, long* outRealLen)
{
	assert(_scanning);

	if(_bytesReady == 0)
	{
		_rowOper.await();
		swapBuffers();
		rcvRowAsync();
		processRow();
	}

	int copySize = min(_bytesReady, length);
	memcpy(buffer, _bytesPtr, copySize);

	_bytesPtr   += copySize;
	_bytesReady -= copySize;
	*outRealLen  = copySize;

	return 0;
}

int Scanner::finishScan()
{
	// stop scanning
	if(sendMsg41(CHANNEL_2012)< 0) { return -1; }
	// zbytocne?
	if(sendMsg70(CHANNEL_2012)< 0) { return -1; }

	_scanning = false;

	return 0;
}